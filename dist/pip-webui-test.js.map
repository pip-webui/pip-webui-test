{"version":3,"sources":["account.js","content.js","data_set.test.js","entity.js","general.js","tests.js","user_party.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACllfile":"pip-webui-test.js","sourcesContent":["/**\n * @file Provides a service to work with mocked user\n * @copyright Digital Living Software Corp. 2014-2015\n */\n\n(function () {\n    'use strict';\n\n    var thisModule = angular.module('pipTest.Account', ['pipTest.DataSet']);\n\n    thisModule.service('pipTestAccount', ['pipTestDataSet', function (pipTestDataSet) {\n\n        return {\n            getServerUrl: getServerUrl,\n            getSamplerAccount: getSamplerAccount,\n            getTesterAccount: getTesterAccount\n        };\n\n        // Returns server url\n        function getServerUrl() {\n            return pipTestDataSet.SERVER_URL;\n        }\n\n        // Returns account, users and parties\n        function getSamplerAccount() {\n            return pipTestDataSet.SAMPLER_ACCOUNT;\n        }\n\n        function getTesterAccount() {\n            return pipTestDataSet.TESTER_ACCOUNT;\n        }\n    }]);\n\n})();\n","/**\n * @file Mock data for checklist\n * @copyright Digital Living Software Corp. 2014-2015\n */\n\n/* global chance */\n\n(function () {\n    'use strict';\n\n    var thisModule = angular.module('pipTest.Content', ['pipTest.DataSet']);\n\n    thisModule.service('pipTestContent', function () {\n\n        return {\n            getCheckList: getCheckList\n        };\n\n        // Returns entity\n        function getCheckList(options) {\n\n            var size = 1 + Math.floor(Math.random() * 10),\n                onlyCheck,\n                onlyUnCheck,\n                optionTextType, // {word, sentence, paragraph}\n                optionLength,\n                checklistContent = [],\n                i;\n\n            if (options) {\n                size = options.size ? options.size : size;\n                onlyCheck = options.onlyCheck ? options.onlyCheck : false;\n                onlyUnCheck = options.onlyUnCheck ? options.onlyUnCheck : false;\n                optionTextType = options.optionTextType ? options.optionTextType : null;\n                optionLength = options.optionLength ? options.optionLength : null;\n            }\n\n            for (i = 0; i < size; i++) {\n                checklistContent.push({\n                    text: getText(optionTextType, optionLength),\n                    checked: getChecked(onlyCheck, onlyUnCheck)\n                });\n            }\n\n            return checklistContent;\n\n            // helpful functions\n            function getText(optionTextType, optionLength) {\n                var text;\n\n                switch (optionTextType) {\n                    case 'word':\n                        text = chance.word({ length: optionLength });\n                        break;\n                    case 'sentence':\n                        text = chance.sentence({ words: optionLength });\n                        break;\n                    case 'paragraph':\n                        text = chance.paragraph({ sentences: optionLength });\n                        break;\n                    default:\n                        text = chance.sentence({words: optionLength});\n                }\n\n                return text;\n            }\n\n            function getChecked(onlyCheck, onlyUnCheck) {\n                return onlyCheck || onlyUnCheck || chance.bool();\n            }\n        }\n\n    });\n\n})();\n","/**\n * @file Service provides mocked data\n * @copyright Digital Living Software Corp. 2014-2015\n */\n\n(function () {\n    'use strict';\n\n    var thisModule = angular.module('pipTest.DataSet', []);\n\n    thisModule.service('pipTestDataSet', function () {\n\n        var ABCD = 'abcdefghijklmnopqrstuvwxyz',\n            ABCD_CAPITALIZE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n            DIGIT = '0123456789',\n            SIGN = ' .,;:-!?',\n\n            SERVER_URL = 'http://alpha.pipservices.net',\n\n            // define users\n            SAMPLER_ACCOUNT = {\n                name: 'Sampler User',\n                email: 'sampler@digitallivingsoftware.com',\n                password: 'test123',\n                language: 'en',\n                theme: ''\n            },\n            TESTER_ACCOUNT = {\n                name: 'Empty User',\n                email: 'emptyUser@test.ru',\n                password: '123456',\n                language: 'en',\n                theme: ''\n            },\n\n            MANAGER_USER = {\n                name: 'manager_user',\n                email: 'test2piplife@mail.ru',\n                language: 'en',\n                pwd_fail_count: 0,\n                pwd_last_fail: null,\n                paid: false,\n                admin: false,\n                party_access: [\n                    {\n                        share_level: 0,\n                        type: 'partner',\n                        party_name: 'Bill Tester',\n                        party_id: '55f20e7b4b0c570c4b1f12e0',\n                        contributor: false,\n                        manager: false,\n                        id: '55f716315b46fab820dd8df3'\n                    },\n                    {\n                        share_level: 0,\n                        type: 'partner',\n                        party_name: 'emptyUser',\n                        party_id: 'user_id00000000000000001',\n                        contributor: false,\n                        manager: false,\n                        id: '55f716315b46fab820dd8de4'\n                    }\n                ],\n                sessions: [\n                    {\n                        address: '109.254.67.37',\n                        client: 'chrome',\n                        platform: 'windows 6.3',\n                        last_req: '2015-11-19T13:57:12.723Z',\n                        opened: '2015-11-19T13:57:12.723Z',\n                        id: 'session_id00000000000002'\n                    }, {\n                        address: '176.8.157.60',\n                        client: 'chrome',\n                        platform: 'windows 6.3',\n                        last_req: '2015-11-19T17:22:11.791Z',\n                        opened: '2015-11-19T17:22:11.791Z',\n                        id: 'session_id00000000000003'\n                    }\n                ],\n                signin: '2015-11-19T17:22:11.688Z',\n                signup: '2015-09-10T20:56:08.025Z',\n                active: true,\n                lock: false,\n                email_ver: false,\n                id: 'user_id00000000000000002',\n                last_session_id: 'session_id00000000000003'\n            },\n\n            EMPTY_USER = {\n                pwd_last_fail: null,\n                pwd_fail_count: 0,\n                name: 'emptyUser',\n                email: 'emptyUser@test.ru',\n                language: 'en',\n                paid: false,\n                admin: false,\n                party_access: [],\n                sessions: [\n                    {\n                        address: '176.8.157.60',\n                        client: 'chrome',\n                        platform: 'windows 6.3',\n                        last_req: '2015-11-19T17:34:42.019Z',\n                        opened: '2015-11-19T17:34:42.019Z',\n                        id: 'session_id00000000000002'\n                    }\n                ],\n                signin: '2015-11-19T17:34:41.934Z',\n                signup: '2015-11-19T17:34:41.721Z',\n                active: true,\n                lock: false,\n                email_ver: false,\n                id: 'user_id00000000000000001',\n                last_session_id: 'session_id00000000000002'\n            },\n\n            // define settings\n            SETTINGS1 = {\n                intro: {\n                    lastId: '55f6fc635b46fab820dd8cce',\n                    date: '2015-09-15T17:28:23.941Z'\n                },\n                party_id: 'user_id00000000000000001',\n                events: {\n                    viewType: 'kanban'\n                },\n                visions: {\n                    viewType: 'tile'\n                },\n                notes: {\n                    viewType: 'tile'\n                },\n                partners: {\n                    viewType: 'tile'\n                }\n            },\n            SETTINGS2 = {\n                intro: {\n                    lastId: '55f6fc635b46fab820dd8cce',\n                    date: '2015-09-15T17:28:23.941Z'\n                },\n                party_id: 'user_id00000000000000002',\n                messages: {\n                    viewType: 'send'\n                },\n                goals: {\n                    navId: 'all'\n                },\n                areas: {\n                    navId: 'now'\n                },\n                news: {\n                    viewType: 'tile'\n                }\n            };\n\n        return {\n            ABCD: ABCD,\n            ABCD_CAPITALIZE: ABCD_CAPITALIZE,\n            DIGIT: DIGIT,\n            SIGN: SIGN,\n            SETTINGS1: SETTINGS1,\n            SETTINGS2: SETTINGS2,\n            EMPTY_USER: EMPTY_USER,\n            MANAGER_USER: MANAGER_USER,\n            TESTER_ACCOUNT: TESTER_ACCOUNT,\n            SAMPLER_ACCOUNT: SAMPLER_ACCOUNT,\n            SERVER_URL: SERVER_URL\n        };\n    });\n\n})();\n","/**\n * @file Mock entry data\n * @copyright Digital Living Software Corp. 2014-2015\n */\n\n(function (angular, _, chance) {\n    'use strict';\n\n    var thisModule = angular.module('pipTest.Entity', ['pipTest.DataSet', 'pipTest.General']);\n\n    thisModule.service('pipTestEntity', ['pipTestGeneral', function (pipTestGeneral) {\n\n        return {\n            getEntity: getEntity,\n            setContrib: setContrib,\n            getOneArea: getOneArea,\n            getAreasCollection: getAreasCollection,\n            getOneGoal: getOneGoal,\n            getGoalsCollection: getGoalsCollection\n        };\n\n        // get entity\n        function getEntity(propertyValues) {\n            var userId,\n                userName,\n                id,\n                titleLength,\n                entity;\n\n            userId = pipTestGeneral.getObjectId();\n            userName = chance.sentence({words: 2});\n            id = pipTestGeneral.getObjectId();\n            titleLength = 1 + Math.random() * 5;\n\n            entity = {\n                title: chance.sentence({words: titleLength}),\n                type: 'goal',\n                creator_id: userId,\n                creator_name: userName,\n                contribs: [{\n                    from_id: id,\n                    party_id: userId,\n                    party_name: 'emptyUser',\n                    accept: 'accepted',\n                    role: ''\n                }],\n                tags: [],\n                id: id\n            };\n\n            if (propertyValues) {\n                entity = _.assign(entity, propertyValues);\n            }\n\n            return entity;\n        }\n\n        // Set Contrib (entity, parties, contribCount)\n        function setContrib(party, partyArray, minContribCount, maxContribCount) {\n            if (!party || !partyArray) {\n                return;\n            }\n\n            var count,\n                chooseParty;\n\n            if (minContribCount && maxContribCount) {\n                count = Math.floor(Math.random() * (maxContribCount - minContribCount + 1));\n            } else {\n                count = minContribCount\n                    ? Math.floor(Math.random() * (partyArray.length - maxContribCount))\n                    : Math.floor(Math.random() * partyArray.length);\n            }\n\n            chooseParty = _.take(partyArray, count);\n\n            _.each(chooseParty, function (item) {\n                party.contribs.push({\n                    party_name: item.name,\n                    party_id: item.id,\n                    accept: pipTestGeneral.getOne(['accepted', 'invited'])\n                });\n            });\n\n            party.contribs = _.uniq(party.contribs, 'party_id');\n        }\n\n        // get area\n        function getOneArea(forUser, propertyValues) {\n            var params = {};\n\n            params.type = 'area';\n\n            if (forUser && forUser.name) {\n                params.creator_name = forUser.name;\n                params.creator_id = forUser.id;\n            }\n\n            return getEntity(params, propertyValues);\n        }\n\n        function getAreasCollection(count, forUser, propertyValues) {\n            var collection = [],\n                params = {},\n                i;\n\n            params.type = 'area';\n\n            if (forUser && forUser.name) {\n                params.creator_name = forUser.name;\n                params.creator_id = forUser.id;\n            }\n\n            for (i = 0; i < count; i++) {\n                collection.push(getEntity(params, propertyValues));\n            }\n\n            return collection;\n        }\n\n        // get goal\n        function getOneGoal(forUser, propertyValues) {\n            var params = {};\n\n            params.type = pipTestGeneral.getOne(['goal', 'aspiration', 'objective', 'dream', 'accomplishment']);\n\n            if (forUser && forUser.name) {\n                params.creator_name = forUser.name;\n                params.creator_id = forUser.id;\n            }\n\n            return getEntity(params, propertyValues);\n        }\n\n        function getGoalsCollection(count, forUser, propertyValues) {\n            var i,\n                collection = [],\n                params = {};\n\n            params.type = pipTestGeneral.getOne(['goal', 'aspiration', 'objective', 'dream', 'accomplishment']);\n\n            if (forUser && forUser.name) {\n                params.creator_name = forUser.name;\n                params.creator_id = forUser.id;\n            }\n\n            for (i = 0; i < count; i++) {\n                collection.push(getEntity(params, propertyValues));\n            }\n\n            return collection;\n        }\n\n    }]);\n\n})(window.angular, window._, window.chance);\n","/**\n * @file Service provide utils\n * @copyright Digital Living Software Corp. 2014-2015\n */\n\n(function (angular, _, chance) {\n    'use strict';\n\n    var thisModule = angular.module('pipTest.General', ['pipTest.DataSet']);\n\n    thisModule.service('pipTestGeneral', ['pipTestDataSet', function (pipTestDataSet) {\n\n        return {\n            getObjectId: getObjectId,\n            getOneWord: getOneWord,\n            getOne: getOne\n        };\n\n        // Returns random ID\n        function getObjectId(n, allowedChars) {\n            var poolObjectId = pipTestDataSet.ABCD + pipTestDataSet.DIGIT,\n                length = n || 16,\n                pool = allowedChars || poolObjectId;\n\n            return chance.string({length: length, pool: pool});\n        }\n\n        // Returns random one from the passed asset\n        function getOne(arr) {\n            return _.sample(arr);\n        }\n\n        // Returns random word\n        function getOneWord(n) {\n            var length = n && n > 0 ? Math.floor(Math.random() * n) : null,\n                poolWord = pipTestDataSet.ABCD + pipTestDataSet.ABCD_CAPITALIZE;\n\n            return chance.word({length: length, pool: poolWord});\n        }\n\n    }]);\n\n})(window.angular, window._, window.chance);\n","/**\n * @file Registration of WebUI tests\n * @copyright Digital Living Software Corp. 2014-2015\n */\n\n(function () {\n    'use strict';\n\n    angular.module('pipWebuiTests', [\n        'pipTest.DataSet',\n        'pipTest.Account',\n        'pipTest.Entity',\n        'pipTest.UserParty',\n        'pipTest.General',\n        'pipTest.Content'\n    ]);\n\n})();\n","/**\n * @file Service provides mocked user's party\n * @copyright Digital Living Software Corp. 2014-2015\n */\n\n(function (_, chance) {\n    'use strict';\n\n    var thisModule = angular.module('pipTest.UserParty', ['pipTest.DataSet']);\n\n    thisModule.service('pipTestUserParty', ['pipTestDataSet', 'pipTestGeneral', function (pipTestDataSet, pipTestGeneral) {\n\n        return {\n            getOneUser: getOneUser,\n            getSettings: getSettings,\n            getParty: getParty,\n            getConnection: getConnection,\n            getPartyAccess: getPartyAccess,\n            getSession: getSession\n        };\n\n        function getSession(propertyValues) {\n            var date = new Date(chance.timestamp()),\n                session = {\n                    address: chance.ip(),\n                    client: pipTestGeneral.getOne(['chrome', 'mozilla', 'explorer']),\n                    platform: pipTestGeneral.getOne(['windows 8', 'windows 7', 'linux']),\n                    last_req: date.toJSON(),\n                    opened: date.toJSON(),\n                    id: pipTestGeneral.getObjectId()\n                };\n\n            if (propertyValues) {\n                session = _.assign(session, propertyValues);\n            }\n\n            return session;\n        }\n\n        // get user for testing\n        function getOneUser(propertyValues) {\n            var date1 = chance.timestamp(),\n                date2 = chance.timestamp(),\n\n                user = {\n                    pwd_last_fail: null,\n                    pwd_fail_count: 0,\n                    name: chance.first() + ' ' + chance.name(),\n                    email: chance.email(),\n                    language: pipTestGeneral.getOne(['en', 'ru', 'fr']),\n                    paid: chance.bool({likelihood: 30}),\n                    admin: false,\n                    party_access: getPartyAccess(),\n                    sessions: getSession(),\n                    signin: date1 > date2 ? new Date(date1).toJSON() : new Date(date2).toJSON(),\n                    signup: date1 > date2 ? new Date(date2).toJSON() : new Date(date1).toJSON(),\n                    active: true,\n                    lock: false,\n                    email_ver: false,\n                    id: pipTestGeneral.getObjectId(),\n                    last_session_id: pipTestGeneral.getObjectId()\n                };\n\n            if (propertyValues) {\n                user = _.assign(user, propertyValues);\n            }\n\n            return user;\n        }\n\n        function getPartyAccess(n, propertyValues) {\n            var result = [],\n                length = n || Math.floor(Math.random() * 10),\n                i,\n                p,\n                isContributor;\n\n            for (i = 0; i < length; i++) {\n                isContributor = chance.bool({likelihood: 30});\n\n                p = {\n                    share_level: 0,\n                    type: 'partner',\n                    party_name: chance.first() + ' ' + chance.name(),\n                    party_id: pipTestGeneral.getObjectId(),\n                    contributor: isContributor,\n                    manager: isContributor ? chance.bool({likelihood: 30}) : false,\n                    id: pipTestGeneral.getObjectId()\n                };\n\n                if (propertyValues) {\n                    p = _.assign(p, propertyValues);\n                }\n\n                result.push(p);\n            }\n\n            return result;\n        }\n\n        function getParty(propertyValues) {\n            var date1 = chance.timestamp(),\n                date2 = chance.timestamp(),\n                party = {\n                    name: chance.first() + ' ' + chance.name(),\n                    email: chance.email(),\n                    type: 'person', // todo ??\n                    gender: chance.gender().toLowerCase(),\n                    loc_name: chance.address(),\n                    loc_pos: {\n                        type: 'Point',\n                        coordinates: [\n                            chance.floating({min: -120, max: 120}),\n                            chance.floating({min: -120, max: 120})\n                        ]\n                    },\n                    join: 'approve', // todo ??\n                    updated: date1 > date2 ? new Date(date1).toJSON() : new Date(date2).toJSON(),\n                    created: date1 > date2 ? new Date(date2).toJSON() : new Date(date1).toJSON(),\n                    id: pipTestGeneral.getObjectId()\n                };\n\n            if (propertyValues) {\n                party = _.assign(party, propertyValues);\n            }\n\n            return party;\n        }\n\n        function getConnection(party, propertyValues) {\n            if (!party || !party.id || !party.name) {\n                return null;\n            }\n\n            var isContributor = chance.bool({likelihood: 30}),\n                con = {\n                    party_id: party.id,\n                    party_type: party.type,\n                    party_name: party.name,\n                    to_party_id: pipTestGeneral.getObjectId(),\n                    to_party_name: chance.first() + ' ' + chance.name(),\n                    to_party_type: 'person', // todo\n                    type: 'partner', // todo\n                    share_level: chance.integer({min: 0, max: 4}),\n                    accept: 'joined', // todo\n                    group_ids: [],\n                    contributor: isContributor,\n                    manager: isContributor ? chance.bool({likelihood: 30}) : false,\n                    snoozed: false,\n                    created: new Date(chance.timestamp()).toJSON(),\n                    id: pipTestGeneral.getObjectId()\n                };\n\n            if (propertyValues) {\n                con = _.assign(con, propertyValues);\n            }\n\n            return con;\n        }\n\n        // Returns settings mocked object due to passed number\n        function getSettings(settingsConfig) {\n            return settingsConfig === 2 ? pipTestDataSet.SETTINGS2 : pipTestDataSet.SETTINGS1;\n        }\n\n    }]);\n\n})(window._, window.chance);\n"],"sourceRoot":"/source/"}