{"version":3,"sources":["account.js","content.js","data_set.test.js","entity.js","general.js","tests.js","user_party.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClxrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxfile":"pip-webui-test.js","sourcesContent":["/* global angular */\n\n(function () {\n    'use strict';\n\n    var thisModule = angular.module('pipTest.Account', ['pipTest.DataSet']);\n\n    thisModule.service('pipTestAccount', ['pipTestDataSet', function (pipTestDataSet) {\n\n            return {\n                getServerUrl: getServerUrl,\n                getSamplerAccount: getSamplerAccount,\n                getTesterAccount: getTesterAccount\n\n            };\n\n            // get server url\n            function getServerUrl() {\n                return pipTestDataSet.SERVER_URL;\n            };\n\n            // get account, users and parties\n            function getSamplerAccount() {\n                return pipTestDataSet.SAMPLER_ACCOUNT;\n            };\n\n            function getTesterAccount() {\n                return pipTestDataSet.TESTER_ACCOUNT;\n            };\n\n        }]\n    );\n\n})();\n","/* global angular */\n\n(function () {\n    'use strict';\n\n    var thisModule = angular.module('pipTest.Content', ['pipTest.DataSet']);\n\n    thisModule.service('pipTestContent', function () {\n\n            return {\n\n                getCheckList: getCheckList\n\n            };\n\n            // get entity\n            function getCheckList(options) {\n                function getText(optionTextType, optionLength) {\n                    var text;\n                    if (optionTextType)\n                        switch (optionTextType) {\n                            case 'word':\n                                text = chance.word({length: optionLength});\n                                break;\n                            case 'sentence':\n                                text = chance.sentence({words: optionLength});\n                                break;\n                            case 'paragraph':\n                                text = chance.paragraph({sentences: optionLength});\n                                break;\n                        }\n                    else text = chance.sentence({words: optionLength});\n\n                    return text;\n                };\n\n                function getChecked(onlyCheck, onlyUnCheck) {\n                    if (onlyCheck) return onlyCheck;\n                    if (onlyUnCheck) return onlyUnCheck;\n                    var checked = chance.bool();\n\n                    return checked;\n                };\n\n                var size = 1 + Math.floor(Math.random() * 10),\n                    onlyCheck = false,\n                    onlyUnCheck = false,\n                    optionTextType,// {word, sentence, paragraph}\n                    optionLength,\n                    checklistContent = [],\n                    i = 0;\n\n                if (options) {\n                    size = options.size ? options.size : size;\n                    onlyCheck = options.onlyCheck === true ? options.onlyCheck : onlyCheck;\n                    onlyUnCheck = options.onlyUnCheck === true ? options.onlyUnCheck : onlyUnCheck;\n                    optionTextType = options.optionTextType ? options.optionTextType : null;\n                    optionLength = options.optionLength ? options.optionLength : null;\n                }\n\n                for (i = 0; i < size; i++) {\n                    var item = {\n                        text: getText(optionTextType, optionLength),\n                        checked: getChecked(onlyCheck, onlyUnCheck)\n                    }\n\n                    checklistContent.push(item);\n                }\n\n                return checklistContent;\n            };\n\n\n        }\n\n    );\n\n})();\n","/* global angular */\n\n(function () {\n    'use strict';\n\n    var thisModule = angular.module('pipTest.DataSet', []);\n\n    thisModule.service('pipTestDataSet', function () {\n\n            var ABCD = 'abcdefghijklmnopqrstuvwxyz',\n                ABCD_CAPITALIZE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n                DIGIT = '0123456789',\n                SIGN = ' .,;:-!?';\n\n            var SERVER_URL = 'http://alpha.pipservices.net';\n\n            // define users\n            var SAMPLER_ACCOUNT = {\n                    name: 'Sampler User',\n                    email: 'sampler@digitallivingsoftware.com',\n                    password: 'test123',\n                    language: 'en',\n                    theme: ''\n                },\n                TESTER_ACCOUNT = {\n                    name: 'Empty User',\n                    email: 'emptyUser@test.ru',\n                    password: '123456',\n                    language: 'en',\n                    theme: ''\n                };\n\n            var MANAGER_USER = {\n                    \"name\": \"manager_user\",\n                    \"email\": \"test2piplife@mail.ru\",\n                    \"language\": \"en\",\n                    \"pwd_fail_count\": 0,\n                    \"pwd_last_fail\": null,\n                    \"paid\": false,\n                    \"admin\": false,\n                    \"party_access\": [\n                        {\n                            \"share_level\": 0,\n                            \"type\": \"partner\",\n                            \"party_name\": \"Bill Tester\",\n                            \"party_id\": \"55f20e7b4b0c570c4b1f12e0\",\n                            \"contributor\": false,\n                            \"manager\": false,\n                            \"id\": \"55f716315b46fab820dd8df3\"\n                        },\n                        {\n                            \"share_level\": 0,\n                            \"type\": \"partner\",\n                            \"party_name\": \"emptyUser\",\n                            \"party_id\": \"user_id00000000000000001\",\n                            \"contributor\": false,\n                            \"manager\": false,\n                            \"id\": \"55f716315b46fab820dd8de4\"\n                        }\n                    ],\n                    \"sessions\": [\n                        {\n                            \"address\": \"109.254.67.37\",\n                            \"client\": \"chrome\",\n                            \"platform\": \"windows 6.3\",\n                            \"last_req\": \"2015-11-19T13:57:12.723Z\",\n                            \"opened\": \"2015-11-19T13:57:12.723Z\",\n                            \"id\": \"session_id00000000000002\"\n                        },  {\n                            \"address\": \"176.8.157.60\",\n                            \"client\": \"chrome\",\n                            \"platform\": \"windows 6.3\",\n                            \"last_req\": \"2015-11-19T17:22:11.791Z\",\n                            \"opened\": \"2015-11-19T17:22:11.791Z\",\n                            \"id\": \"session_id00000000000003\"\n                        }\n                    ],\n                    \"signin\": \"2015-11-19T17:22:11.688Z\",\n                    \"signup\": \"2015-09-10T20:56:08.025Z\",\n                    \"active\": true,\n                    \"lock\": false,\n                    \"email_ver\": false,\n                    \"id\": \"user_id00000000000000002\",\n                    \"last_session_id\": \"session_id00000000000003\"\n                },\n\n                EMPTY_USER = {\n                    \"pwd_last_fail\": null,\n                    \"pwd_fail_count\": 0,\n                    \"name\": \"emptyUser\",\n                    \"email\": \"emptyUser@test.ru\",\n                    \"language\": \"en\",\n                    \"paid\": false,\n                    \"admin\": false,\n                    \"party_access\": [],\n                    \"sessions\": [\n                        {\n                            \"address\": \"176.8.157.60\",\n                            \"client\": \"chrome\",\n                            \"platform\": \"windows 6.3\",\n                            \"last_req\": \"2015-11-19T17:34:42.019Z\",\n                            \"opened\": \"2015-11-19T17:34:42.019Z\",\n                            \"id\": \"session_id00000000000002\"\n                        }\n                    ],\n                    \"signin\": \"2015-11-19T17:34:41.934Z\",\n                    \"signup\": \"2015-11-19T17:34:41.721Z\",\n                    \"active\": true,\n                    \"lock\": false,\n                    \"email_ver\": false,\n                    \"id\": \"user_id00000000000000001\",\n                    \"last_session_id\": \"session_id00000000000002\"\n                };\n\n            //define settings\n            var SETTINGS1 = {\n                    \"intro\": {\n                        \"lastId\": \"55f6fc635b46fab820dd8cce\",\n                        \"date\": \"2015-09-15T17:28:23.941Z\"\n                    },\n                    \"party_id\": \"user_id00000000000000001\",\n                    \"events\": {\n                        \"viewType\": \"kanban\"\n                    },\n                    \"visions\": {\n                        \"viewType\": \"tile\"\n                    },\n                    \"notes\": {\n                        \"viewType\": \"tile\"\n                    },\n                    \"partners\": {\n                        \"viewType\": \"tile\"\n                    }\n                },\n                SETTINGS2 = {\n                    \"intro\": {\n                        \"lastId\": \"55f6fc635b46fab820dd8cce\",\n                        \"date\": \"2015-09-15T17:28:23.941Z\"\n                    },\n                    \"party_id\": \"user_id00000000000000002\",\n                    \"messages\": {\n                        \"viewType\": \"send\"\n                    },\n                    \"goals\": {\n                        \"navId\": \"all\"\n                    },\n                    \"areas\": {\n                        \"navId\": \"now\"\n                    },\n                    \"news\": {\n                        \"viewType\": \"tile\"\n                    }\n                };\n\n            return {\n\n                ABCD: ABCD,\n\n                ABCD_CAPITALIZE: ABCD_CAPITALIZE,\n\n                DIGIT: DIGIT,\n\n                SIGN: SIGN,\n\n                SETTINGS1: SETTINGS1,\n\n                SETTINGS2: SETTINGS2,\n\n                EMPTY_USER: EMPTY_USER,\n\n                MANAGER_USER: MANAGER_USER,\n\n                TESTER_ACCOUNT: TESTER_ACCOUNT,\n\n                SAMPLER_ACCOUNT: SAMPLER_ACCOUNT,\n\n                SERVER_URL: SERVER_URL\n\n            };\n\n        }\n    );\n\n})();\n","/* global angular */\n\n(function () {\n    'use strict';\n\n    var thisModule = angular.module('pipTest.Entity', ['pipTest.DataSet', 'pipTest.General']);\n\n    thisModule.service('pipTestEntity', ['pipTestGeneral', function (pipTestGeneral) {\n\n            return {\n\n                getEntity: getEntity,\n\n                setContrib: setContrib,\n\n                getOneArea: getOneArea,\n\n                getAreasCollection: getAreasCollection,\n\n                getOneGoal: getOneGoal,\n\n                getGoalsCollection: getGoalsCollection\n            };\n\n            // get entity\n            function getEntity(propertyValues) {\n                var userId,\n                    userName,\n                    id,\n                    titleLength;\n\n                userId = pipTestGeneral.getObjectId();\n                userName = getRandomString();\n                id = pipTestGeneral.getObjectId();\n                titleLength = 1 + Math.random() * 5;\n\n                var entity = {\n                    \"title\": getText(titleLength),\n                    \"type\": \"goal\",\n                    \"creator_id\": userId,\n                    \"creator_name\": userName,\n                    \"contribs\": [\n                        {\n                            \"from_id\": id,\n                            \"party_id\": userId,\n                            \"party_name\": \"emptyUser\",\n                            \"accept\": \"accepted\",\n                            \"role\": \"\"\n                        }\n                    ],\n                    \"tags\": [],\n                    \"id\": id\n                };\n                if (propertyValues) entity = _.assign(entity, propertyValues);\n\n                return entity;\n            };\n\n            // Set Contrib (entity, parties, contribCount)\n            function setContrib(party, partyArray, minContribCount, maxContribCount) {\n                if (!party || !partyArray) return;\n\n                var count, i, chooseParty = [];\n\n                if (minContribCount && maxContribCount)\n                    count = Math.floor(Math.random() * (maxContribCount - minContribCount + 1));\n                else {\n                    if (!minContribCount)\n                        count = Math.floor(Math.random() * partyArray.length);\n                    else\n                        count = Math.floor(Math.random() * (partyArray.length - maxContribCount));\n                }\n\n                chooseParty = _.take(partyArray, count);\n                _.each(chooseParty, function (item) {\n                    party.contribs.push({\n                        party_name: item.name,\n                        party_id: item.id,\n                        accept: pipTestGeneral.getOne(['accepted', 'invited'])\n                    });\n                });\n\n                party.contribs = _.uniq(party.contribs, 'party_id');\n            };\n\n              // get area\n            function getOneArea(forUser, propertyValues) {\n                var area,\n                    params = {};\n\n                params.type = 'area';\n                if (forUser && forUser.name) {\n                    params.creator_name = forUser.name;\n                    params.creator_id = forUser.id;\n                }\n                area = getEntity(params, propertyValues);\n\n                return area;\n            };\n\n            function getAreasCollection(count, forUser, propertyValues) {\n                var i,\n                    collection = [],\n                    area,\n                    params = {};\n\n                params.type = 'area';\n                if (forUser && forUser.name) {\n                    params.creator_name = forUser.name;\n                    params.creator_id = forUser.id;\n                }\n\n                for ( i = 0; i < count; i++ ) {\n                    area = getEntity(params, propertyValues);\n                    collection.push(area);\n                }\n\n                return collection;\n            };\n\n            // get goal\n            function getOneGoal(forUser, propertyValues) {\n                var goal,\n                    params = {};\n\n                params.type = pipTestGeneral.getOne(['goal', 'aspiration', 'objective', 'dream', 'accomplishment']);\n                if (forUser && forUser.name) {\n                    params.creator_name = forUser.name;\n                    params.creator_id = forUser.id;\n                }\n                goal = getEntity(params, propertyValues);\n\n                return goal;\n            };\n\n            function getGoalsCollection(count, forUser, propertyValues) {\n                var i,\n                    collection = [],\n                    goal,\n                    params = {};\n\n                params.type = getOne(['goal', 'aspiration', 'objective', 'dream', 'accomplishment']);\n                if (forUser && forUser.name) {\n                    params.creator_name = forUser.name;\n                    params.creator_id = forUser.id;\n                }\n\n                for ( i = 0; i < count; i++ ) {\n                    goal = getEntity(params, propertyValues);\n                    collection.push(goal);\n                }\n\n                return collection;\n            };\n\n            function getTags() {\n                //{\n                //    \"party_id\": \"55f1ee67880929ec46ec394c\",\n                //    \"tags\": [\n                //    {\n                //        \"tag\": \"first tag\",\n                //        \"used\": \"2015-11-19T14:45:57.901Z\",\n                //        \"count\": 39\n                //    },\n                //    {\n                //        \"tag\": \"6\",\n                //        \"used\": \"2015-09-16T12:08:11.316Z\",\n                //        \"count\": 1\n                //    },\n                //    {\n                //        \"tag\": \"yyyyyyyyyyyyyyy\",\n                //        \"used\": \"2015-09-24T16:20:09.244Z\",\n                //        \"count\": 4\n                //    }\n                //],\n                //    \"id\": \"55f5edcf8175ba46db9dec74\"\n                //}\n\n            }\n\n            function getOneTag() {\n\n            };\n\n        }]\n\n    );\n\n})();\n","/* global angular */\n\n(function () {\n    'use strict';\n\n    var thisModule = angular.module('pipTest.General', ['pipTest.DataSet']);\n\n    thisModule.service('pipTestGeneral', ['pipTestDataSet', function (pipTestDataSet) {\n\n            return {\n\n                getObjectId: getObjectId,\n\n                getOneWord: getOneWord,\n\n                getOne: getOne\n\n            };\n\n            // get Id\n            function getObjectId(n, abd) {\n                var poolObjectId = pipTestDataSet.ABCD + pipTestDataSet.DIGIT,\n                n = n ? n : 16;\n                abd = abd ? abd : poolObjectId;\n                var s = chance.string({length: n, pool: abd});\n\n                return s;\n            };\n\n            // get random one of set\n            function getOne(arr) {\n                if (!arr || !Array.isArray(arr) || arr.length == 0) return null;\n\n                var rand = Math.floor(Math.random() * arr.length);\n\n                return arr[rand];\n            };\n\n\n            // get random word\n            function getOneWord(n) {\n                var length = n && n > 0 ? Math.floor(Math.random() * n) : null;\n                var poolWord =  pipTestDataSet.ABCD + pipTestDataSet.ABCD_CAPITALIZE;\n\n                var oneWord = chance.word({length: length, pool: poolWord});\n\n                return oneWord;\n            };\n\n        }]\n    );\n\n})();\n","/**\n * @file Registration of WebUI tests\n * @copyright Digital Living Software Corp. 2014-2015\n */\n\n/* global angular */\n\n(function () {\n    'use strict';\n\n    angular.module('pipWebuiTests', [\n        'pipTest.DataSet',\n        'pipTest.Account',\n        'pipTest.Entity',\n        'pipTest.UserParty',\n        'pipTest.General',\n        'pipTest.Content'\n\n\n    ]);\n\n})();\n\n\n","/* global angular */\n\n(function () {\n    'use strict';\n\n    var thisModule = angular.module('pipTest.UserParty', ['pipTest.DataSet']);\n\n    thisModule.service('pipTestUserParty', ['pipTestDataSet', 'pipTestGeneral', function (pipTestDataSet, pipTestGeneral) {\n\n            return {\n\n                getOneUser: getOneUser,\n\n                getSettings: getSettings,\n\n                getParty: getParty,\n\n                getConnection: getConnection,\n\n                getPartyAccess: getPartyAccess,\n\n                getSession: getSession\n\n            };\n\n            function getSession(propertyValues) {\n                var date = new Date(chance.timestamp()),\n                    session = {\n                        \"address\": chance.ip(),\n                        \"client\": pipTestGeneral.getOne(['chrome', 'mozilla', 'explorer']),\n                        \"platform\": pipTestGeneral.getOne(['windows 8', 'windows 7', 'linux']),\n                        \"last_req\": date.toJSON(),\n                        \"opened\": date.toJSON(),\n                        \"id\": session_id\n                    };\n\n                if (propertyValues) session = _.assign(session, propertyValues);\n\n                return session;\n            }\n\n            // get user for testing\n            function getOneUser(propertyValues) {\n                var\n                    session_id = pipTestGeneral.getObjectId(),\n                    date1 = chance.timestamp(),\n                    date2 = chance.timestamp();\n\n                var user = {\n                    \"pwd_last_fail\": null,\n                    \"pwd_fail_count\": 0,\n                    \"name\": chance.first() + ' ' + chance.name(),\n                    \"email\": chance.email(),\n                    \"language\": pipTestGeneral.getOne(['en', 'ru', 'fr']),\n                    \"paid\": chance.bool({likelihood: 30}),\n                    \"admin\": false,\n                    \"party_access\": getPartyAccess(),\n                    \"sessions\": getSession(),\n                    \"signin\": date1 > date2 ? new Date(date1).toJSON() : new Date(date2).toJSON(),\n                    \"signup\": date1 > date2 ? new Date(date2).toJSON() : new Date(date1).toJSON(),\n                    \"active\": true,\n                    \"lock\": false,\n                    \"email_ver\": false,\n                    \"id\": pipTestGeneral.getObjectId(),\n                    \"last_session_id\": session_id\n                };\n\n                if (propertyValues) user = _.assign(user, propertyValues);\n\n                return user;\n            };\n\n            function getPartyAccess(n, propertyValues) {\n                var result = [],\n                    n = n ? n : Math.floor(Math.random() * 10),\n                    i;\n\n                for (i = 0; i < n; i++) {\n                    var isContributor = chance.bool({likelihood: 30});\n\n                    var p = {\n                        \"share_level\": 0,\n                        \"type\": \"partner\",\n                        \"party_name\": chance.first() + ' ' + chance.name(),\n                        \"party_id\": pipTestGeneral.getObjectId(),\n                        \"contributor\": isContributor,\n                        \"manager\": isContributor ? chance.bool({likelihood: 30}) : false,\n                        \"id\": pipTestGeneral.getObjectId()\n                    };\n                    if (propertyValues) p = _.assign(p, propertyValues);\n\n                    result.push(p);\n                }\n\n                return result;\n            };\n\n            function getParty(propertyValues) {\n                var date1 = chance.timestamp(),\n                    date2 = chance.timestamp();\n\n                var party = {\n                    \"name\": chance.first() + ' ' + chance.name(),\n                    \"email\": chance.email(),\n                    \"type\": \"person\", // todo ??\n                    \"gender\": chance.gender().toLowerCase(),\n                    \"loc_name\": chance.address(),\n                        \"loc_pos\": {\n                        \"type\": \"Point\",\n                            \"coordinates\": [\n                                chance.floating({min: -120, max: 120}),\n                                chance.floating({min: -120, max: 120})\n                            ]\n                    },\n                    \"join\": \"approve\", // todo ??\n                    \"updated\": date1 > date2 ? new Date(date1).toJSON() : new Date(date2).toJSON(),\n                    \"created\": date1 > date2 ? new Date(date2).toJSON() : new Date(date1).toJSON(),\n                    \"id\": pipTestGeneral.getObjectId()\n                };\n\n                if (propertyValues) party = _.assign(party, propertyValues);\n\n                return party;\n            }\n\n            function getConnection(party, propertyValues) {\n                if (!party || !party.id || !party.name) return null;\n                var isContributor = chance.bool({likelihood: 30});\n\n                var con = {\n                    \"party_id\": party.id,\n                    \"party_type\": party.type,\n                    \"party_name\": party.name,\n                    \"to_party_id\": pipTestGeneral.getObjectId(),\n                    \"to_party_name\": chance.first() + ' ' + chance.name(),\n                    \"to_party_type\": \"person\", //todo\n                    \"type\": \"partner\", //todo\n                    \"share_level\": chance.integer({min: 0, max: 4}) ,\n                    \"accept\": \"joined\", //todo\n                    \"group_ids\": [],\n                    \"contributor\": isContributor,\n                    \"manager\": isContributor ? chance.bool({likelihood: 30}) : false,\n                    \"snoozed\": false,\n                    \"created\": new Date(chance.timestamp()).toJSON(),\n                    \"id\": pipTestGeneral.getObjectId()\n                };\n\n                if (propertyValues) con = _.assign(con, propertyValues);\n\n                return con;\n            };\n\n            // get settings\n            function getSettings(number) {\n                if (number && number == 2) return pipTestDataSet.SETTINGS2;\n\n                return pipTestDataSet.SETTINGS1;\n            };\n\n        }]\n    );\n\n})();\n"]}